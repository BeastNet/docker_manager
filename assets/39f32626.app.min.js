define("docker-manager/app",["ember/resolver","ember/load-initializers","exports"],function(a,b,c){"use strict";var d=a["default"],e=b["default"],f=Ember.Application.extend({modulePrefix:"docker-manager",Resolver:d});e(f,"docker-manager"),c["default"]=f}),define("docker-manager/components/progress-bar",["exports"],function(a){"use strict";a["default"]=Em.Component.extend({classNameBindings:[":progress"],barStyle:function(){var a=parseInt(this.get("percent"),10);return a>0?(a>100&&(a=100),"width: "+this.get("percent")+"%"):void 0}.property("percent")})}),define("docker-manager/components/x-tab",["exports"],function(a){"use strict";a["default"]=Em.Component.extend({tagName:"li",classNameBindings:["active"],active:function(){return this.get("childViews").anyBy("active")}.property("childViews.@each.active")})}),define("docker-manager/controllers/index",["exports"],function(a){"use strict";a["default"]=Em.ObjectController.extend({upgrading:null})}),define("docker-manager/controllers/processes",["exports"],function(a){"use strict";a["default"]=Ember.ObjectController.extend({autoRefresh:!1,init:function(){this._super();var a=this;window.setInterval(function(){a.performRefresh()},5e3)},performRefresh:function(){this.get("autoRefresh")&&this.get("model").refresh()}})}),define("docker-manager/controllers/repo",["exports"],function(a){"use strict";a["default"]=Em.ObjectController.extend({needs:["index"],upgradingRepo:Em.computed.alias("controllers.index.upgrading"),managerRepo:Em.computed.alias("controllers.index.managerRepo"),upgradeDisabled:function(){var a=this.get("upgradingRepo");if(Em.isNone(a)){var b=this.get("managerRepo");return b?!b.get("upToDate")&&b!==this.get("model"):!1}return!0}.property("upgradingRepo","model","managerRepo","managerRepo.upToDate")})}),define("docker-manager/controllers/upgrade",["exports"],function(a){"use strict";a["default"]=Em.ObjectController.extend({init:function(){this._super(),this.reset()},complete:Em.computed.equal("status","complete"),failed:Em.computed.equal("status","failed"),messageReceived:function(a){switch(a.type){case"log":this.set("output",this.get("output")+a.value+"\n");break;case"percent":this.set("percent",a.value);break;case"status":this.set("status",a.value),("complete"===a.value||"failed"===a.value)&&this.set("upgrading",!1),"complete"===a.value&&this.set("version",this.get("latest.version"))}},upgradeButtonText:function(){return this.get("upgrading")?"Upgrading...":"Start Upgrading"}.property("upgrading"),startBus:function(){var a=this;MessageBus.subscribe("/docker/upgrade",function(b){a.messageReceived(b)})},stopBus:function(){MessageBus.unsubscribe("/docker/upgrade")},reset:function(){this.setProperties({output:"",status:null,percent:0})},actions:{start:function(){this.reset();var a=this.get("model");a.get("upgrading")||a.startUpgrade()},resetUpgrade:function(){var a=this;bootbox.confirm("<p><b>WARNING:</b> You should only reset upgrades that have failed and are not running.</p> <p>This will NOT cancel currently running builds and should only be used as a last resort.</p>",function(b){if(b){var c=a.get("model");c.resetUpgrade().then(function(){a.reset()})}})}}})}),define("docker-manager/helpers/fmt-commit",["exports"],function(a){"use strict";a["default"]=Em.Handlebars.makeBoundHelper(function(a,b){return Em.isNone(b)?void 0:new Em.Handlebars.SafeString("(<a href='"+b+"'>"+a+"</a>)")})}),define("docker-manager/initializers/csrf-token",["ic-ajax","exports"],function(a,b){"use strict";var c=a["default"];b["default"]={name:"findCsrfToken",initialize:function(){return c("/session/csrf").then(function(a){var b=a.csrf;$.ajaxPrefilter(function(a,c,d){a.crossDomain||d.setRequestHeader("X-CSRF-Token",b)})})}}}),define("docker-manager/models/process-list",["ic-ajax","exports"],function(a,b){"use strict";var c=a["default"],d=Em.Object.extend({init:function(){this._super()},refresh:function(){var a=this;return c("/admin/docker/ps").then(function(b){return a.set("output",b),a})}});d.reopenClass({find:function(){var a=d.create();return a.refresh()}}),b["default"]=d}),define("docker-manager/models/repo",["ic-ajax","exports"],function(a,b){"use strict";var c=a["default"],d=[],e=Em.Object.extend({upToDate:function(){return this.get("version")===this.get("latest.version")}.property("version","latest.version"),shouldCheck:function(){if(Em.isNone(this.get("version")))return!1;if(this.get("checking"))return!1;var a=this.get("lastCheckedAt");if(a){var b=(new Date).getTime()-a;return b>6e4}return!0}.property().volatile(),repoAjax:function(a,b){return b=b||{},b.data=this.getProperties("path","version"),c(a,b)},findLatest:function(){var a=this;return new Em.RSVP.Promise(function(b){return a.get("shouldCheck")?(a.set("checking",!0),void a.repoAjax("/admin/docker/latest").then(function(c){a.setProperties({checking:!1,lastCheckedAt:(new Date).getTime(),latest:Em.Object.create(c.latest)}),b()})):b()})},findProgress:function(){return this.repoAjax("/admin/docker/progress").then(function(a){return a.progress})},resetUpgrade:function(){var a=this;return this.repoAjax("/admin/docker/upgrade",{type:"DELETE"}).then(function(){a.set("upgrading",!1)})},startUpgrade:function(){var a=this;return this.set("upgrading",!0),this.repoAjax("/admin/docker/upgrade",{type:"POST"}).catch(function(){a.set("upgrading",!1)})}});e.reopenClass({findAll:function(){return new Em.RSVP.Promise(function(a){return d.length?a(d):void c("/admin/docker/repos").then(function(b){d=b.repos.map(function(a){return e.create(a)}),a(d)})})},findUpgrading:function(){return this.findAll().then(function(a){return a.findBy("upgrading",!0)})},find:function(a){return this.findAll().then(function(b){return b.findBy("id",a)})}}),b["default"]=e}),define("docker-manager/router",["exports"],function(a){"use strict";var b=Ember.Router.extend();b.map(function(){this.route("processes"),this.resource("upgrade",{path:"/upgrade/:id"})}),a["default"]=b}),define("docker-manager/routes/index",["docker-manager/models/repo","exports"],function(a,b){"use strict";var c=a["default"];b["default"]=Em.Route.extend({model:function(){return c.findAll()},setupController:function(a,b){a.setProperties({model:b,upgrading:null}),b.forEach(function(b){b.findLatest(),b.get("upgrading")&&a.set("upgrading",b),"docker_manager"===b.get("id")&&a.set("managerRepo",b)})},actions:{upgrade:function(a){this.transitionTo("upgrade",a)}}})}),define("docker-manager/routes/processes",["docker-manager/models/process-list","exports"],function(a,b){"use strict";var c=a["default"];b["default"]=Em.Route.extend({model:function(){return c.find()}})}),define("docker-manager/routes/upgrade",["docker-manager/models/repo","exports"],function(a,b){"use strict";var c=a["default"];b["default"]=Em.Route.extend({model:function(a){return c.find(a.id)},afterModel:function(a){var b=this;return c.findUpgrading().then(function(c){return c&&c!==a?Ember.RSVP.Promise.reject("wat"):a.findLatest().then(function(){return a.findProgress().then(function(a){b.set("progress",a)})})})},setupController:function(a,b){a.reset(),a.setProperties({model:b,output:this.get("progress.logs"),percent:this.get("progress.percentage")}),a.startBus()},deactivate:function(){this.controllerFor("upgrade").stopBus()}})}),define("docker-manager/utils/ajax",["exports"],function(a){"use strict";a["default"]=function(){return ic.ajax.apply(null,arguments)}}),define("docker-manager/views/loading",["exports"],function(a){"use strict";a["default"]=Em.View.extend({_showOnInsert:function(){var a=this;a.set("runner",Em.run.later(function(){a.$("h3").show()},200))}.on("didInsertElement"),_cancelFade:function(){Em.run.cancel(this.get("runner"))}.on("willDestroyElement")})}),define("docker-manager/views/processes",["exports"],function(a){"use strict";a["default"]=Em.View.extend({_insertedIntoDOM:function(){this.set("controller.autoRefresh",!0)}.on("didInsertElement"),_removedFromDOM:function(){this.set("controller.autoRefresh",!1)}.on("willDestroyElement")})}),define("docker-manager/templates/application",["exports"],function(a){a["default"]=Ember.Handlebars.template(function(a,b,c,d,e){function f(a,b){b.buffer.push('<img src="/assets/images/logo.png" class="logo">')}function g(a,b){b.buffer.push("Docker Manager")}function h(a,b){b.buffer.push("Home")}function i(a,b){b.buffer.push("Processes")}this.compilerInfo=[4,">= 1.0.0"],c=this.merge(c,Ember.Handlebars.helpers),e=e||{};var j,k,l,m="",n=this,o=c.helperMissing;return e.buffer.push('<header class="container">\n  '),k=c["link-to"]||b&&b["link-to"],l={hash:{},hashTypes:{},hashContexts:{},inverse:n.noop,fn:n.program(1,f,e),contexts:[b],types:["STRING"],data:e},j=k?k.call(b,"index",l):o.call(b,"link-to","index",l),(j||0===j)&&e.buffer.push(j),e.buffer.push("\n  <h1>"),k=c["link-to"]||b&&b["link-to"],l={hash:{},hashTypes:{},hashContexts:{},inverse:n.noop,fn:n.program(3,g,e),contexts:[b],types:["STRING"],data:e},j=k?k.call(b,"index",l):o.call(b,"link-to","index",l),(j||0===j)&&e.buffer.push(j),e.buffer.push('</h1>\n</header>\n\n\n<div class="container">\n\n  <ul class="nav nav-tabs">\n    '),k=c["x-tab"]||b&&b["x-tab"],l={hash:{route:"index"},hashTypes:{route:"STRING"},hashContexts:{route:b},inverse:n.noop,fn:n.program(5,h,e),contexts:[],types:[],data:e},j=k?k.call(b,l):o.call(b,"x-tab",l),(j||0===j)&&e.buffer.push(j),e.buffer.push("\n    "),k=c["x-tab"]||b&&b["x-tab"],l={hash:{route:"processes"},hashTypes:{route:"STRING"},hashContexts:{route:b},inverse:n.noop,fn:n.program(7,i,e),contexts:[],types:[],data:e},j=k?k.call(b,l):o.call(b,"x-tab",l),(j||0===j)&&e.buffer.push(j),e.buffer.push("\n  </ul>\n\n  "),j=c._triageMustache.call(b,"outlet",{hash:{},hashTypes:{},hashContexts:{},contexts:[b],types:["ID"],data:e}),(j||0===j)&&e.buffer.push(j),e.buffer.push("\n</div>\n"),m})}),define("docker-manager/templates/components/progress-bar",["exports"],function(a){a["default"]=Ember.Handlebars.template(function(a,b,c,d,e){this.compilerInfo=[4,">= 1.0.0"],c=this.merge(c,Ember.Handlebars.helpers),e=e||{};var f="",g=this.escapeExpression;return e.buffer.push('<div class="progress-bar" '),e.buffer.push(g(c["bind-attr"].call(b,{hash:{style:"barStyle"},hashTypes:{style:"STRING"},hashContexts:{style:b},contexts:[],types:[],data:e}))),e.buffer.push("></div>\n"),f})}),define("docker-manager/templates/components/x-tab",["exports"],function(a){a["default"]=Ember.Handlebars.template(function(a,b,c,d,e){function f(a,b){var d;d=c._triageMustache.call(a,"yield",{hash:{},hashTypes:{},hashContexts:{},contexts:[a],types:["ID"],data:b}),b.buffer.push(d||0===d?d:"")}this.compilerInfo=[4,">= 1.0.0"],c=this.merge(c,Ember.Handlebars.helpers),e=e||{};var g,h,i,j="",k=this,l=c.helperMissing;return h=c["link-to"]||b&&b["link-to"],i={hash:{},hashTypes:{},hashContexts:{},inverse:k.noop,fn:k.program(1,f,e),contexts:[b],types:["ID"],data:e},g=h?h.call(b,"route",i):l.call(b,"link-to","route",i),(g||0===g)&&e.buffer.push(g),e.buffer.push("\n"),j})}),define("docker-manager/templates/index",["exports"],function(a){a["default"]=Ember.Handlebars.template(function(a,b,c,d,e){function f(a,b){var d,e,f,i="";return b.buffer.push("\n    <tr>\n      <td>\n        "),d=c._triageMustache.call(a,"name",{hash:{},hashTypes:{},hashContexts:{},contexts:[a],types:["ID"],data:b}),(d||0===d)&&b.buffer.push(d),b.buffer.push("\n        "),b.buffer.push(n((e=c["fmt-commit"]||a&&a["fmt-commit"],f={hash:{},hashTypes:{},hashContexts:{},contexts:[a,a],types:["ID","ID"],data:b},e?e.call(a,"version","url",f):o.call(a,"fmt-commit","version","url",f)))),b.buffer.push("\n      </td>\n      <td>\n        "),d=c["if"].call(a,"checking",{hash:{},hashTypes:{},hashContexts:{},inverse:p.program(4,h,b),fn:p.program(2,g,b),contexts:[a],types:["ID"],data:b}),(d||0===d)&&b.buffer.push(d),b.buffer.push("\n      </td>\n    </tr>\n    "),i}function g(a,b){b.buffer.push("\n          Checking for new version...\n        ")}function h(a,b){var d,e="";return b.buffer.push("\n          "),d=c.unless.call(a,"upToDate",{hash:{},hashTypes:{},hashContexts:{},inverse:p.noop,fn:p.program(5,i,b),contexts:[a],types:["ID"],data:b}),(d||0===d)&&b.buffer.push(d),b.buffer.push("\n        "),e}function i(a,b){var d,e,f,g="";return b.buffer.push("\n            <div class='new-version'>\n              <h4>New Version Available!</h4>\n              <ul>\n                <li>Remote Version: "),b.buffer.push(n((e=c["fmt-commit"]||a&&a["fmt-commit"],f={hash:{},hashTypes:{},hashContexts:{},contexts:[a,a],types:["ID","ID"],data:b},e?e.call(a,"latest.version","url",f):o.call(a,"fmt-commit","latest.version","url",f)))),b.buffer.push("</li>\n                <li>Last Updated: "),d=c._triageMustache.call(a,"latest.date",{hash:{},hashTypes:{},hashContexts:{},contexts:[a],types:["ID"],data:b}),(d||0===d)&&b.buffer.push(d),b.buffer.push("</li>\n                <li class='new-commits'>"),d=c._triageMustache.call(a,"latest.commits_behind",{hash:{},hashTypes:{},hashContexts:{},contexts:[a],types:["ID"],data:b}),(d||0===d)&&b.buffer.push(d),b.buffer.push(" new commits</li>\n              </ul>\n              "),d=c["if"].call(a,"upgrading",{hash:{},hashTypes:{},hashContexts:{},inverse:p.program(8,k,b),fn:p.program(6,j,b),contexts:[a],types:["ID"],data:b}),(d||0===d)&&b.buffer.push(d),b.buffer.push("\n            </div>\n          "),g}function j(a,b){var d="";return b.buffer.push('\n                <button class="btn" '),b.buffer.push(n(c.action.call(a,"upgrade","",{hash:{},hashTypes:{},hashContexts:{},contexts:[a,a],types:["ID","ID"],data:b}))),b.buffer.push(">Currently Upgrading...</button>\n              "),d}function k(a,b){var d="";return b.buffer.push('\n                <button class="btn" '),b.buffer.push(n(c.action.call(a,"upgrade","",{hash:{},hashTypes:{},hashContexts:{},contexts:[a,a],types:["ID","ID"],data:b}))),b.buffer.push(" "),b.buffer.push(n(c["bind-attr"].call(a,{hash:{disabled:"upgradeDisabled"},hashTypes:{disabled:"STRING"},hashContexts:{disabled:a},contexts:[],types:[],data:b}))),b.buffer.push(">Upgrade to the Latest Version</button>\n              "),d}this.compilerInfo=[4,">= 1.0.0"],c=this.merge(c,Ember.Handlebars.helpers),e=e||{};var l,m="",n=this.escapeExpression,o=c.helperMissing,p=this;return e.buffer.push("<h3>Repositories</h3>\n\n<table class='table' id='repos'>\n  <tr>\n    <th style='width: 50%'>Name</th>\n    <th>Status</th>\n  </tr>\n  <tbody>\n    "),l=c.each.call(b,"model",{hash:{itemController:"repo"},hashTypes:{itemController:"STRING"},hashContexts:{itemController:b},inverse:p.noop,fn:p.program(1,f,e),contexts:[b],types:["ID"],data:e}),(l||0===l)&&e.buffer.push(l),e.buffer.push("\n  </tbody>\n</table>\n"),m})}),define("docker-manager/templates/loading",["exports"],function(a){a["default"]=Ember.Handlebars.template(function(a,b,c,d,e){this.compilerInfo=[4,">= 1.0.0"],c=this.merge(c,Ember.Handlebars.helpers),e=e||{},e.buffer.push("<h3 class='loading'>Loading...</h3>\n")})}),define("docker-manager/templates/processes",["exports"],function(a){a["default"]=Ember.Handlebars.template(function(a,b,c,d,e){this.compilerInfo=[4,">= 1.0.0"],c=this.merge(c,Ember.Handlebars.helpers),e=e||{};var f,g="";return e.buffer.push("<h3>Processes</h3>\n\n<div class='logs'>"),f=c._triageMustache.call(b,"output",{hash:{},hashTypes:{},hashContexts:{},contexts:[b],types:["ID"],data:e}),(f||0===f)&&e.buffer.push(f),e.buffer.push("</div>\n"),g})}),define("docker-manager/templates/upgrade",["exports"],function(a){a["default"]=Ember.Handlebars.template(function(a,b,c,d,e){function f(a,b){b.buffer.push("\n  <p>Upgrade completed successfully!</p>\n")}function g(a,b){b.buffer.push("\n  <p>Sorry, there wasn an error upgrading Discourse. Please check the logs.</p>\n")}function h(a,b){var d,e,f,g="";return b.buffer.push("\n  <p>"),d=c._triageMustache.call(a,"name",{hash:{},hashTypes:{},hashContexts:{},contexts:[a],types:["ID"],data:b}),(d||0===d)&&b.buffer.push(d),b.buffer.push(" is at the newest version "),b.buffer.push(p((e=c["fmt-commit"]||a&&a["fmt-commit"],f={hash:{},hashTypes:{},hashContexts:{},contexts:[a,a],types:["ID","ID"],data:b},e?e.call(a,"version","url",f):o.call(a,"fmt-commit","version","url",f)))),b.buffer.push(".</p>\n"),g}function i(a,b){var d,e="";return b.buffer.push("\n  <div style='clear: both'>\n    <button "),b.buffer.push(p(c.action.call(a,"start",{hash:{},hashTypes:{},hashContexts:{},contexts:[a],types:["ID"],data:b}))),b.buffer.push(" "),b.buffer.push(p(c["bind-attr"].call(a,{hash:{disabled:"upgrading"},hashTypes:{disabled:"STRING"},hashContexts:{disabled:a},contexts:[],types:[],data:b}))),b.buffer.push(" class='btn'>"),d=c._triageMustache.call(a,"upgradeButtonText",{hash:{},hashTypes:{},hashContexts:{},contexts:[a],types:["ID"],data:b}),(d||0===d)&&b.buffer.push(d),b.buffer.push("</button>\n    "),d=c["if"].call(a,"upgrading",{hash:{},hashTypes:{},hashContexts:{},inverse:q.noop,fn:q.program(8,j,b),contexts:[a],types:["ID"],data:b}),(d||0===d)&&b.buffer.push(d),b.buffer.push("\n  </div>\n"),e}function j(a,b){var d="";return b.buffer.push("\n      <button "),b.buffer.push(p(c.action.call(a,"resetUpgrade",{hash:{},hashTypes:{},hashContexts:{},contexts:[a],types:["ID"],data:b}))),b.buffer.push(' class="btn unlock">Reset Upgrade</button>\n    '),d}this.compilerInfo=[4,">= 1.0.0"],c=this.merge(c,Ember.Handlebars.helpers),e=e||{};var k,l,m,n="",o=c.helperMissing,p=this.escapeExpression,q=this;return e.buffer.push("<h3>Upgrade "),k=c._triageMustache.call(b,"name",{hash:{},hashTypes:{},hashContexts:{},contexts:[b],types:["ID"],data:e}),(k||0===k)&&e.buffer.push(k),e.buffer.push("</h3>\n\n"),e.buffer.push(p((l=c["progress-bar"]||b&&b["progress-bar"],m={hash:{percent:"percent"},hashTypes:{percent:"ID"},hashContexts:{percent:b},contexts:[],types:[],data:e},l?l.call(b,m):o.call(b,"progress-bar",m)))),e.buffer.push("\n\n"),k=c["if"].call(b,"complete",{hash:{},hashTypes:{},hashContexts:{},inverse:q.noop,fn:q.program(1,f,e),contexts:[b],types:["ID"],data:e}),(k||0===k)&&e.buffer.push(k),e.buffer.push("\n\n"),k=c["if"].call(b,"failed",{hash:{},hashTypes:{},hashContexts:{},inverse:q.noop,fn:q.program(3,g,e),contexts:[b],types:["ID"],data:e}),(k||0===k)&&e.buffer.push(k),e.buffer.push("\n\n"),k=c["if"].call(b,"upToDate",{hash:{},hashTypes:{},hashContexts:{},inverse:q.program(7,i,e),fn:q.program(5,h,e),contexts:[b],types:["ID"],data:e}),(k||0===k)&&e.buffer.push(k),e.buffer.push("\n\n<div class='logs'>"),k=c._triageMustache.call(b,"output",{hash:{},hashTypes:{},hashContexts:{},contexts:[b],types:["ID"],data:e}),(k||0===k)&&e.buffer.push(k),e.buffer.push("</div>\n"),n})});